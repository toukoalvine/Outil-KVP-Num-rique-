import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import json
from typing import Dict, List, Any
import uuid

# Configuration de la page
st.set_page_config(
    page_title="Outil KVP Num√©rique",
    page_icon="üîÑ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS pour un meilleur design
st.markdown("""
<style>
    .pdca-header {
        background: linear-gradient(90deg, #FF6B6B, #4ECDC4, #45B7D1, #96CEB4);
        padding: 20px;
        border-radius: 10px;
        text-align: center;
        color: white;
        font-size: 24px;
        font-weight: bold;
        margin-bottom: 20px;
    }
    
    .phase-card {
        padding: 15px;
        border-radius: 10px;
        margin: 10px 0;
        border-left: 5px solid;
    }
    
    .plan-card { border-left-color: #FF6B6B; background-color: #FFE5E5; }
    .do-card { border-left-color: #4ECDC4; background-color: #E5F9F6; }
    .check-card { border-left-color: #45B7D1; background-color: #E5F3FF; }
    .act-card { border-left-color: #96CEB4; background-color: #E5F5E5; }
    
    .task-completed { text-decoration: line-through; opacity: 0.6; }
    .priority-high { border-left: 3px solid #FF4444; }
    .priority-medium { border-left: 3px solid #FFA500; }
    .priority-low { border-left: 3px solid #4CAF50; }
    
    .metric-card {
        background: white;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        text-align: center;
    }
</style>
""", unsafe_allow_html=True)

# Initialisation du Session State
def init_session_state():
    if 'projects' not in st.session_state:
        st.session_state.projects = {}
    if 'current_project' not in st.session_state:
        st.session_state.current_project = None
    if 'user_role' not in st.session_state:
        st.session_state.user_role = 'Administrateur'  # Simplifi√© pour la d√©mo
    if 'tasks' not in st.session_state:
        st.session_state.tasks = {}
    if 'comments' not in st.session_state:
        st.session_state.comments = {}

# Cr√©er des donn√©es d'exemple
def create_sample_project():
    sample_id = str(uuid.uuid4())
    return {
        'id': sample_id,
        'name': 'Exemple : R√©duction des temps d\'attente',
        'description': 'R√©duire les temps d\'attente en production de 30%',
        'created_date': datetime.now().strftime('%Y-%m-%d'),
        'status': 'en_cours',
        'plan': {
            'problem': 'Temps d\'attente longs entre les √©tapes de production',
            'goal': 'R√©duire les temps d\'attente de 30%',
            'root_cause': 'Capacit√©s des machines d√©s√©quilibr√©es',
            'measures': ['Analyse des machines', 'Optimisation des processus', 'Formation']
        },
        'do': {
            'implementation_steps': [
                {'task': 'Analyser l\'utilisation des machines', 'responsible': 'Marie Dupont', 'due_date': '2024-07-15', 'status': 'termin√©'},
                {'task': 'Identifier les goulots d\'√©tranglement', 'responsible': 'Pierre Martin', 'due_date': '2024-07-20', 'status': 'en_cours'},
                {'task': 'Impl√©menter les mesures d\'optimisation', 'responsible': 'Sophie Bernard', 'due_date': '2024-07-30', 'status': 'ouvert'}
            ]
        },
        'check': {
            'metrics': {'temps_attente_avant': 45, 'temps_attente_apres': 32, 'amelioration_pourcentage': 28.9},
            'results': 'Les temps d\'attente ont pu √™tre r√©duits de 28,9%'
        },
        'act': {
            'standardization': 'Nouvelles instructions de travail cr√©√©es',
            'lessons_learned': 'L\'analyse r√©guli√®re des capacit√©s est essentielle',
            'next_steps': 'Extension √† d\'autres lignes de production'
        }
    }

# Calcul du progr√®s
def calculate_progress(project_data):
    phases = ['plan', 'do', 'check', 'act']
    completed_phases = 0
    
    if project_data.get('plan', {}).get('problem'):
        completed_phases += 0.25
    if project_data.get('do', {}).get('implementation_steps'):
        completed_phases += 0.25
    if project_data.get('check', {}).get('results'):
        completed_phases += 0.25
    if project_data.get('act', {}).get('standardization'):
        completed_phases += 0.25
    
    return min(completed_phases * 100, 100)

# Affichage du progr√®s PDCA
def show_pdca_progress(current_phase):
    phases = ['Planifier', 'Faire', 'V√©rifier', 'Agir']
    colors = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4']
    phase_keys = ['plan', 'do', 'check', 'act']
    
    cols = st.columns(4)
    for i, (phase, color, key) in enumerate(zip(phases, colors, phase_keys)):
        with cols[i]:
            if key == current_phase:
                st.markdown(f"""
                <div style="background-color: {color}; color: white; padding: 10px; 
                           border-radius: 5px; text-align: center; font-weight: bold;">
                    {phase} ‚úì
                </div>
                """, unsafe_allow_html=True)
            else:
                st.markdown(f"""
                <div style="background-color: #f0f0f0; color: #666; padding: 10px; 
                           border-radius: 5px; text-align: center;">
                    {phase}
                </div>
                """, unsafe_allow_html=True)

# Application principale
def main():
    init_session_state()
    
    # En-t√™te
    st.markdown('<div class="pdca-header">üîÑ Outil KVP Num√©rique</div>', unsafe_allow_html=True)
    
    # Barre lat√©rale pour la s√©lection de projet
    with st.sidebar:
        st.header("S√©lection de Projet")
        
        # Cr√©er un nouveau projet
        if st.button("‚ûï Nouveau Projet"):
            new_project = {
                'id': str(uuid.uuid4()),
                'name': 'Nouveau Projet KVP',
                'description': '',
                'created_date': datetime.now().strftime('%Y-%m-%d'),
                'status': 'brouillon',
                'plan': {}, 'do': {}, 'check': {}, 'act': {}
            }
            st.session_state.projects[new_project['id']] = new_project
            st.session_state.current_project = new_project['id']
            st.rerun()
        
        # Ajouter un projet d'exemple
        if st.button("üìù Charger Projet d'Exemple"):
            sample = create_sample_project()
            st.session_state.projects[sample['id']] = sample
            st.session_state.current_project = sample['id']
            st.rerun()
        
        # Liste des projets
        if st.session_state.projects:
            project_names = {pid: proj['name'] for pid, proj in st.session_state.projects.items()}
            selected_project = st.selectbox(
                "Projet Actif :",
                options=list(project_names.keys()),
                format_func=lambda x: project_names[x],
                index=0 if st.session_state.current_project is None else 
                      list(project_names.keys()).index(st.session_state.current_project) 
                      if st.session_state.current_project in project_names else 0
            )
            st.session_state.current_project = selected_project
        
        # R√¥le utilisateur
        st.selectbox("R√¥le Utilisateur :", ['Administrateur', '√âditeur', 'Lecteur'], 
                    index=['Administrateur', '√âditeur', 'Lecteur'].index(st.session_state.user_role),
                    key='user_role')
    
    # Contenu principal
    if not st.session_state.projects:
        st.info("üëã Bienvenue ! Cr√©ez un nouveau projet ou chargez le projet d'exemple.")
        
        # Information d'int√©gration
        with st.expander("üéØ Tour de l'Outil : Comment fonctionne l'Outil KVP"):
            st.markdown("""
            **1. Cycle PDCA :** Travaillez de mani√®re structur√©e √† travers les quatre phases
            - **Planifier :** D√©finir le probl√®me et planifier les mesures
            - **Faire :** Mettre en ≈ìuvre et suivre les mesures
            - **V√©rifier :** Examiner et √©valuer les r√©sultats
            - **Agir :** Standardiser et d√©finir les prochaines √©tapes
            
            **2. Suivi des T√¢ches :** G√©rer les t√¢ches avec responsabilit√©s et √©ch√©ances
            **3. Visualisation :** Tableaux de bord et suivi des progr√®s
            **4. Travail d'√âquipe :** Commentaires et collaboration
            """)
        return
    
    # Afficher le projet actuel
    current_proj = st.session_state.projects[st.session_state.current_project]
    
    # En-t√™te du projet avec progr√®s
    col1, col2, col3 = st.columns([2, 1, 1])
    with col1:
        st.header(current_proj['name'])
        if st.session_state.user_role in ['Administrateur', '√âditeur']:
            new_name = st.text_input("Nom du Projet :", current_proj['name'], key="proj_name")
            if new_name != current_proj['name']:
                current_proj['name'] = new_name
    
    with col2:
        progress = calculate_progress(current_proj)
        st.metric("Progr√®s", f"{progress:.0f}%")
    
    with col3:
        status_options = ['brouillon', 'en_cours', 'termin√©', 'en_attente']
        status_labels = {'brouillon': 'üìù Brouillon', 'en_cours': 'üîÑ En Cours', 
                        'termin√©': '‚úÖ Termin√©', 'en_attente': '‚è∏Ô∏è En Attente'}
        if st.session_state.user_role in ['Administrateur', '√âditeur']:
            new_status = st.selectbox("Statut :", status_options, 
                                    index=status_options.index(current_proj.get('status', 'brouillon')),
                                    format_func=lambda x: status_labels[x])
            current_proj['status'] = new_status
    
    # Onglets pour les phases PDCA
    tab1, tab2, tab3, tab4, tab5 = st.tabs(["üìã Planifier", "üî® Faire", "üìä V√©rifier", "üéØ Agir", "üìà Tableau de Bord"])
    
    with tab1:  # PLAN
        st.markdown('<div class="phase-card plan-card"><h3>üìã Planifier - Planification</h3></div>', unsafe_allow_html=True)
        show_pdca_progress('plan')
        
        if st.session_state.user_role in ['Administrateur', '√âditeur']:
            # D√©finition du probl√®me
            st.subheader("üéØ D√©finition du Probl√®me")
            problem = st.text_area("Quel est le probl√®me ?", 
                                 current_proj.get('plan', {}).get('problem', ''),
                                 help="D√©crivez le probl√®me de mani√®re concr√®te et mesurable")
            
            # D√©finition des objectifs
            st.subheader("üéØ D√©finition des Objectifs")
            goal = st.text_area("Quel est l'objectif ?", 
                              current_proj.get('plan', {}).get('goal', ''),
                              help="Objectifs SMART : Sp√©cifiques, Mesurables, Atteignables, Pertinents, Temporels")
            
            # Analyse des causes
            st.subheader("üîç Analyse des Causes")
            root_cause = st.text_area("Quelles sont les causes principales ?", 
                                    current_proj.get('plan', {}).get('root_cause', ''),
                                    help="Utilisez les 5 Pourquoi, le diagramme d'Ishikawa ou d'autres m√©thodes d'analyse")
            
            # Planification des mesures
            st.subheader("üìù Planification des Mesures")
            measures_text = st.text_area("Mesures pr√©vues (une par ligne) :", 
                                       '\n'.join(current_proj.get('plan', {}).get('measures', [])))
            measures = [m.strip() for m in measures_text.split('\n') if m.strip()]
            
            # Sauvegarde automatique
            if 'plan' not in current_proj:
                current_proj['plan'] = {}
            current_proj['plan'].update({
                'problem': problem,
                'goal': goal,
                'root_cause': root_cause,
                'measures': measures
            })
        else:
            # Affichage seul pour les lecteurs
            plan_data = current_proj.get('plan', {})
            if plan_data.get('problem'):
                st.write("**Probl√®me :**", plan_data['problem'])
            if plan_data.get('goal'):
                st.write("**Objectif :**", plan_data['goal'])
            if plan_data.get('root_cause'):
                st.write("**Causes :**", plan_data['root_cause'])
            if plan_data.get('measures'):
                st.write("**Mesures :**")
                for measure in plan_data['measures']:
                    st.write(f"‚Ä¢ {measure}")
    
    with tab2:  # DO
        st.markdown('<div class="phase-card do-card"><h3>üî® Faire - Mise en ≈íuvre</h3></div>', unsafe_allow_html=True)
        show_pdca_progress('do')
        
        # Gestion des t√¢ches
        st.subheader("üìã Suivi des T√¢ches")
        
        if st.session_state.user_role in ['Administrateur', '√âditeur']:
            # Ajouter une nouvelle t√¢che
            with st.expander("‚ûï Ajouter une Nouvelle T√¢che"):
                col1, col2, col3 = st.columns(3)
                with col1:
                    new_task = st.text_input("T√¢che :")
                with col2:
                    new_responsible = st.text_input("Responsable :")
                with col3:
                    new_date = st.date_input("Date d'√âch√©ance :")
                
                if st.button("Ajouter la T√¢che") and new_task:
                    if 'do' not in current_proj:
                        current_proj['do'] = {'implementation_steps': []}
                    if 'implementation_steps' not in current_proj['do']:
                        current_proj['do']['implementation_steps'] = []
                    
                    current_proj['do']['implementation_steps'].append({
                        'task': new_task,
                        'responsible': new_responsible,
                        'due_date': new_date.strftime('%Y-%m-%d'),
                        'status': 'ouvert',
                        'priority': 'moyen'
                    })
                    st.rerun()
        
        # Afficher la liste des t√¢ches
        tasks = current_proj.get('do', {}).get('implementation_steps', [])
        if tasks:
            for i, task in enumerate(tasks):
                with st.container():
                    col1, col2, col3, col4, col5 = st.columns([3, 2, 2, 1, 1])
                    
                    with col1:
                        task_class = "task-completed" if task['status'] == 'termin√©' else ""
                        st.markdown(f'<div class="{task_class}">{task["task"]}</div>', unsafe_allow_html=True)
                    
                    with col2:
                        st.write(f"üë§ {task['responsible']}")
                    
                    with col3:
                        st.write(f"üìÖ {task['due_date']}")
                    
                    with col4:
                        if st.session_state.user_role in ['Administrateur', '√âditeur']:
                            status_map = {'ouvert': 'Ouvert', 'en_cours': 'En Cours', 'termin√©': 'Termin√©'}
                            status_options = ['ouvert', 'en_cours', 'termin√©']
                            current_status_index = status_options.index(task['status']) if task['status'] in status_options else 0
                            new_status = st.selectbox("", status_options, 
                                                    index=current_status_index,
                                                    format_func=lambda x: status_map[x],
                                                    key=f"status_{i}")
                            task['status'] = new_status
                    
                    with col5:
                        if st.session_state.user_role == 'Administrateur':
                            if st.button("üóëÔ∏è", key=f"delete_{i}"):
                                tasks.pop(i)
                                st.rerun()
                    
                    st.divider()
        else:
            st.info("Aucune t√¢che d√©finie pour le moment.")
    
    with tab3:  # CHECK
        st.markdown('<div class="phase-card check-card"><h3>üìä V√©rifier - V√©rification</h3></div>', unsafe_allow_html=True)
        show_pdca_progress('check')
        
        if st.session_state.user_role in ['Administrateur', '√âditeur']:
            st.subheader("üìà Indicateurs & R√©sultats")
            
            # Saisir les m√©triques
            col1, col2, col3 = st.columns(3)
            with col1:
                metric1 = st.number_input("Valeur Avant :", 
                                        value=current_proj.get('check', {}).get('metrics', {}).get('temps_attente_avant', 0.0))
            with col2:
                metric2 = st.number_input("Valeur Apr√®s :", 
                                        value=current_proj.get('check', {}).get('metrics', {}).get('temps_attente_apres', 0.0))
            with col3:
                if metric1 > 0:
                    improvement = ((metric1 - metric2) / metric1) * 100
                    st.metric("Am√©lioration", f"{improvement:.1f}%")
            
            # √âvaluation des r√©sultats
            results = st.text_area("√âvaluation des R√©sultats :", 
                                 current_proj.get('check', {}).get('results', ''))
            
            # Sauvegarder
            if 'check' not in current_proj:
                current_proj['check'] = {}
            current_proj['check'].update({
                'metrics': {
                    'temps_attente_avant': metric1,
                    'temps_attente_apres': metric2,
                    'amelioration_pourcentage': improvement if metric1 > 0 else 0
                },
                'results': results
            })
        else:
            # Affichage seul
            check_data = current_proj.get('check', {})
            if check_data.get('metrics'):
                metrics = check_data['metrics']
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("Avant", metrics.get('temps_attente_avant', 0))
                with col2:
                    st.metric("Apr√®s", metrics.get('temps_attente_apres', 0))
                with col3:
                    st.metric("Am√©lioration", f"{metrics.get('amelioration_pourcentage', 0):.1f}%")
            
            if check_data.get('results'):
                st.write("**R√©sultats :**", check_data['results'])
    
    with tab4:  # ACT
        st.markdown('<div class="phase-card act-card"><h3>üéØ Agir - Action</h3></div>', unsafe_allow_html=True)
        show_pdca_progress('act')
        
        if st.session_state.user_role in ['Administrateur', '√âditeur']:
            st.subheader("üìã Standardisation & Prochaines √âtapes")
            
            # Standardisation
            standardization = st.text_area("Standardisation :", 
                                         current_proj.get('act', {}).get('standardization', ''),
                                         help="Comment les am√©liorations sont-elles ancr√©es de mani√®re permanente ?")
            
            # Le√ßons apprises
            lessons = st.text_area("Le√ßons Apprises :", 
                                 current_proj.get('act', {}).get('lessons_learned', ''),
                                 help="Qu'avez-vous appris ? Que feriez-vous diff√©remment ?")
            
            # Prochaines √©tapes
            next_steps = st.text_area("Prochaines √âtapes :", 
                                    current_proj.get('act', {}).get('next_steps', ''),
                                    help="Quelles mesures de suivi sont pr√©vues ?")
            
            # Sauvegarder
            if 'act' not in current_proj:
                current_proj['act'] = {}
            current_proj['act'].update({
                'standardization': standardization,
                'lessons_learned': lessons,
                'next_steps': next_steps
            })
        else:
            # Affichage seul
            act_data = current_proj.get('act', {})
            if act_data.get('standardization'):
                st.write("**Standardisation :**", act_data['standardization'])
            if act_data.get('lessons_learned'):
                st.write("**Le√ßons Apprises :**", act_data['lessons_learned'])
            if act_data.get('next_steps'):
                st.write("**Prochaines √âtapes :**", act_data['next_steps'])
    
    with tab5:  # DASHBOARD
        st.header("üìà Tableau de Bord du Projet")
        
        # KPIs
        col1, col2, col3, col4 = st.columns(4)
        
        tasks = current_proj.get('do', {}).get('implementation_steps', [])
        total_tasks = len(tasks)
        completed_tasks = len([t for t in tasks if t['status'] == 'termin√©'])
        in_progress_tasks = len([t for t in tasks if t['status'] == 'en_cours'])
        overdue_tasks = len([t for t in tasks if t['status'] != 'termin√©' and 
                           datetime.strptime(t['due_date'], '%Y-%m-%d') < datetime.now()])
        
        with col1:
            st.metric("Total T√¢ches", total_tasks)
        with col2:
            st.metric("Termin√©es", completed_tasks, f"{completed_tasks}/{total_tasks}")
        with col3:
            st.metric("En Cours", in_progress_tasks)
        with col4:
            st.metric("En Retard", overdue_tasks, delta=f"-{overdue_tasks}" if overdue_tasks > 0 else None)
        
        # Diagramme de statut des t√¢ches
        if tasks:
            status_counts = {}
            status_labels_fr = {'termin√©': 'Termin√©', 'en_cours': 'En Cours', 'ouvert': 'Ouvert'}
            for task in tasks:
                status = task['status']
                label = status_labels_fr.get(status, status)
                status_counts[label] = status_counts.get(label, 0) + 1
            
            fig = px.pie(
                values=list(status_counts.values()),
                names=list(status_counts.keys()),
                title="R√©partition du Statut des T√¢ches",
                color_discrete_map={
                    'Termin√©': '#4CAF50',
                    'En Cours': '#FFA500',
                    'Ouvert': '#FF4444'
                }
            )
            st.plotly_chart(fig, use_container_width=True)
        
        # √âvolution temporelle (si des m√©triques sont disponibles)
        check_data = current_proj.get('check', {}).get('metrics', {})
        if check_data:
            fig = go.Figure()
            fig.add_trace(go.Bar(
                x=['Avant', 'Apr√®s'],
                y=[check_data.get('temps_attente_avant', 0), check_data.get('temps_attente_apres', 0)],
                marker_color=['#FF6B6B', '#4CAF50']
            ))
            fig.update_layout(title="Am√©lioration par Comparaison", yaxis_title="Valeur")
            st.plotly_chart(fig, use_container_width=True)
    
    # Fonctions d'export
    st.sidebar.markdown("---")
    st.sidebar.subheader("üîÑ Actions")
    
    if st.sidebar.button("üì• Exporter le Projet"):
        project_json = json.dumps(current_proj, indent=2, ensure_ascii=False, default=str)
        st.sidebar.download_button(
            label="üíæ T√©l√©charger JSON",
            data=project_json,
            file_name=f"projet_kvp_{current_proj['name'].replace(' ', '_')}.json",
            mime="application/json"
        )
    
    if st.sidebar.button("üóëÔ∏è Supprimer le Projet") and st.session_state.user_role == 'Administrateur':
        if len(st.session_state.projects) > 1:
            del st.session_state.projects[st.session_state.current_project]
            st.session_state.current_project = list(st.session_state.projects.keys())[0]
            st.rerun()
        else:
            st.sidebar.error("Le dernier projet ne peut pas √™tre supprim√©.")

if __name__ == "__main__":
    main()
